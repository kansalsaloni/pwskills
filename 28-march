Double using callback.
function second(x){

return (2*x);
}
function first(arr,second)
{
var a;
    for(int i=0;i<arr.length();i++)
    {
        a[i]=second(arr[i]);
    }
    return a;
}
var arr[]={1,2,3,4}
var a= first(arr,second);
console.log(a);


############################################################

String Manipulation.
function manipulateString(s){
const manipulatedStr = str.toUpperCase();
        function logString()
        {
              Console.log(`the manipulate string is: ${ manipulatedStr}`);
        }
  return logString;
}

var st=manipulateString("hello world");
st();


############################################################

Age in Days.
function ageInDays(s){

const fullName = `${s.firstName} ${s.lastName}`;
const age=s.age*365;
        function output()
        {
              Console.log(`the person's fullname is: ${ fullname}` and their age in days is ${age});
        }
  return output;
}
const person = {
  firstName: "John",
  lastName: "Doe",
  age: 25
};
var Person=ageInDays(person);
Person();

############################################################
Arrange in alphabetical order.

function logBookTitle(titles){

titles.sort();
console.log(titles.join(",");


}

function processBooks(books, callback) {
 const titles=books.map(books=>books.title);
 logBookTitle(titles);
  }

const books = [ 
{    title: "The Great Gatsby",    author: "F. Scott Fitzgerald",    year: 1925  }, 
{    title: "To Kill a Mockingbird",    author: "Harper Lee",    year: 1960  }, 
{    title: "Pride and Prejudice",    author: "Jane Austen",    year: 1813  }
];

processBooks(books, logBookTitle);


############################################################
Greeting Promise
function createpromise(name)
{
      return new promise((resolve,reject)
      {
          const greeting='Hello ${name}`;
          resolve(greeting)
      });
}
createpromis("Mithun")
.then(greeting=>console.log(greeting));

############################################################
Fetch results asynchronously.

function fetchData(){
 fetch("https://jsonplaceholder.typicode.com/todos/1")
 .then(response => response.json())
 .then(data => console.log(data))
}
fetchData();

############################################################
Multiple requests

async function fetchCombinedData() {
       try {
       const [todoResponse, postResponse] = await Promise.all([
      fetch("https://jsonplaceholder.typicode.com/todos/1"),
      fetch("https://jsonplaceholder.typicode.com/posts/1")
    ]);
     const [todoData, postData] = await Promise.all([
      todoResponse.json(),
      postResponse.json()
    ]);
    const combinedData = {
      todo: todoData,
      post: postData
    };
    
    console.log(combinedData);
}
fetchCombinedData();
############################################################
Get Data from API and Display it on the browser console

fetch('https://jsonplaceholder.typicode.com/posts')
  .then(response => response.json())
  .then(data => console.log(data))
############################################################
Error Handling

fetch('https://jsonplaceholder.typicode.com/posts/123456789')
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(data => {
    console.log(data);
  })
  .catch(error => {
    console.error('There was a problem fetching the data:', error);
  });
############################################################


